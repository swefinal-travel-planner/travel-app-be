// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"github.com/swefinal-travel-planner/travel-app-be/internal/controller"
	"github.com/swefinal-travel-planner/travel-app-be/internal/controller/http"
	"github.com/swefinal-travel-planner/travel-app-be/internal/controller/http/v1"
	"github.com/swefinal-travel-planner/travel-app-be/internal/database"
	"github.com/swefinal-travel-planner/travel-app-be/internal/repository/implement"
	"github.com/swefinal-travel-planner/travel-app-be/internal/service/implement"
)

// Injectors from wire.go:

func InitializeContainer(db database.Db) *controller.ApiContainer {
	studentRepository := repositoryimplement.NewStudentRepository(db)
	studentService := serviceimplement.NewStudentService(studentRepository)
	studentHandler := v1.NewStudentHandler(studentService)
	userRepository := repositoryimplement.NewUserRepository(db)
	authService := serviceimplement.NewAuthService(userRepository)
	authHandler := v1.NewAuthHandler(authService)
	server := http.NewServer(studentHandler, authHandler)
	apiContainer := controller.NewApiContainer(server)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(controller.NewApiContainer)

// may have grpc server in the future
var serverSet = wire.NewSet(http.NewServer)

// handler === controller | with service and repository layers to form 3 layers architecture
var handlerSet = wire.NewSet(v1.NewStudentHandler, v1.NewAuthHandler)

var serviceSet = wire.NewSet(serviceimplement.NewStudentService, serviceimplement.NewAuthService)

var repositorySet = wire.NewSet(repositoryimplement.NewStudentRepository, repositoryimplement.NewUserRepository)
